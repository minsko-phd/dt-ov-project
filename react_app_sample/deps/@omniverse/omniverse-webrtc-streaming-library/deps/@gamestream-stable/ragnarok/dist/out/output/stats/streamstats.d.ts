import { PlatformDetails } from "../dependencies";
import { StreamingQuality, StreamUpdateEvent } from "../interfaces";
import { StreamingStats } from "../internalinterfaces";
import { ExtendedDebugStats, StaticStreamStats } from "../rinterfaces";
import { RTCInboundRtpStreamExtraStats } from "./binaryreport";
export declare class StreamStats {
    private overlayElement;
    private streamingQuality;
    private fps;
    private avgStreamingRate;
    private bwu;
    private bweMbps;
    private lastInboundVideoRtpTimestamp;
    private framesDecoded_;
    private framesReceived_;
    private framesDropped_;
    private avgVideoJitterBufferDelay;
    private avgGameFps?;
    private rtd;
    private packetsLost_;
    private streamingResolution;
    private interFrameDelayMs;
    private videoElement;
    private mainThreadblockedDuration;
    private dcSendDuration;
    private getStatsDuration;
    private decodeTimeAvg;
    private cumulativeAvgDecodeTime;
    private framesLost_;
    private prevFramesLost_;
    private extendedDebugStats;
    private staticStreamStats;
    private platformDetails;
    private codec?;
    private softwareDecodeFallback;
    private decoder;
    constructor(videoElement: HTMLVideoElement, platformDetails: PlatformDetails, staticStreamStats: StaticStreamStats);
    updateAvgStreamingRate(currentReport: RTCIceCandidatePairStats, prevReport: RTCIceCandidatePairStats): void;
    updateBwu(currentBweMbps: number): number;
    updateInboundVideoRtpStats(stats: RTCInboundRtpStreamExtraStats): void;
    updateQScore(sq: StreamingQuality): void;
    updateRtd(rtd: number): void;
    updateJitter(jitter: number): void;
    updateAvgGameFps(fps: number): void;
    getStreamingStats(): StreamingStats;
    makeStreamUpdateEvent(): StreamUpdateEvent;
    drawStatsOnScreen(enableDevStats: boolean): void;
    setShown(show: boolean): void;
    private createOverlayNode;
    updateDcSendDuration(time: number): void;
    updateStatsDuration(time: number): void;
    updateMainThreadBlockDuration(duration: number): void;
    updateExtendedDebugStats(stats: ExtendedDebugStats): void;
    updateVideoCodec(codec: string): void;
    setSoftwareDecodeFallback(fallback: boolean): void;
    setDecoderImplementation(decoder: string): void;
    getText(enableDevStats: boolean): string;
}
