{"version":3,"sources":["out/output/stats/out/output/stats/webrtcbinarystats.ts","out/output/out/output/websocketimpl.ts","out/output/out/output/ragnarokworker.ts"],"names":["depr","size","version","name","rtpv","rtpa","traa","trav","vfmd","pfda","none","createWebSocket","reconnect","header","url","includes","sessionId","accessToken","websocketUrl","localWs","WebSocket","onopen","localWs.onopen","wsLogger","wsHandler","openHandler","ws","pendingMessage","cacheMsgsForAck","stats","send","JSON","stringify","wsQueue","sendOnWsReliablyIfNeeded","onclose","event","localWs.onclose","closeHandler","error","wsHadError","code","reason","wasClean","undefined","onerror","localWs.onerror","onmessage","localWs.onmessage","wsMsg","parse","data","serverSupportsAck","setHeartBeatTimeout","ackid","hb","ack","i","deleteFromAckCache","length","splice","maxReceivedAckId","messageHandler","sendAckToServer","ackmsg","exp","wsException","clearHeartBeatTimeout","heartBeatTimeoutId","self","clearTimeout","setTimeout","_a","checkWebsocketConnectionPeriodically","readyState","addInAckCache","push","module$exports$output$websocketimpl.WebSocketImpl","constructor","wsMessageHandler","wsOpenHandler","wsCloseHandler","openingHandler","wsOpeningHandler","workerLogger","workerException","info","exception","initialize","uninitialize","closeCode","close","OPEN","ctx","perfs","clientEvents","addReport","report","webrtcBinaryStats","buffer","statsMap","get","type","set","element","getStatsConfig","module$exports$output$stats$webrtcbinarystats.statsConfig.depr","module$exports$output$stats$webrtcbinarystats.statsConfig.rtpv","module$exports$output$stats$webrtcbinarystats.statsConfig.rtpa","module$exports$output$stats$webrtcbinarystats.statsConfig.trav","module$exports$output$stats$webrtcbinarystats.statsConfig.traa","module$exports$output$stats$webrtcbinarystats.statsConfig.vfmd","module$exports$output$stats$webrtcbinarystats.statsConfig.pfda","module$exports$output$stats$webrtcbinarystats.statsConfig.none","module$exports$output$stats$webrtcbinarystats.WebrtcBinaryStats","Map","resetLists","clear","totalSize","array__tsickle_destructured_2","array","value","byteLength","module$exports$output$stats$webrtcbinarystats.ChunkHeaderSize","write","dest","startOffset","offset","key__tsickle_destructured_3","arrayBuffer__tsickle_destructured_4","arrayBuffer","config","chunkType","dataBufferView","DataView","setUint8","charCodeAt","setUint16","elementCount","byteCount","source","arr","Uint8Array","statsHeaderObj","webSocket","uploadIntervalId","streamingQuality","mtbDurations","inputChannelStats","garbageCollectionStats","nextAckIdToSendForStats","logmsg","postMessage","msg","log","expmsg","clearCachedData","writeChunkHeader","sizeOfElement","asInt32","num","Math","max","min","uploadData","len","totalLen","headerBytesBuffer","ArrayBuffer","headerView","headerBufferBytes","perfDataSize","PerfEntrySize","eventsDataSize","EventEntrySize","sqEventsDataSize","StreamingQualityEntrySize","durationDataSize","MtbDurationSize","inputChannelDataSize","InputChannelEntrySize","garbageCollectionDataSize","GarbageCollectionEntrySize","ChunkHeaderSize","dataBuffer","setFloat64","RAFTS","DCSend","GetStats","FrameInfo","TS","eventstr","eventtype","j","qualityScore","bandwidthScore","latencyScore","networkLossScore","timestamp","duration","bufferedAmount","maxSchedulingDelay","setInt32","deltaUsedHeapSize","deltaTotalHeapSize","err","message","stack","response","wsMessage","wsClose","wsOpen","wsOpening","ctx.onmessage","initMessage","perf","clientEvent","startStats","statsHeader","setInterval","UploadInterval","statsStarted","stopStats","clearInterval","webrtcStats","sq","startWebSocket","signInURL","stopWebSocket"],"mappings":"AAIIA,IAAAA,oEAAMA,CACFC,KAAMD,EADJA,EAEFE,QAASF,CAFPA,EAGFG,KAAMH,MAHJA,CAANA,EAKAI,oEAAMA,CACFH,KAAMG,EADJA,EAEFF,QAASE,CAFPA,EAGFD,KAAMC,MAHJA,CALNJ,EAUAK,oEAAMA,CACFJ,KAAMI,EADJA,EAEFH,QAASG,CAFPA,EAGFF,KAAME,MAHJA,CAVNL,EAeAM,oEAAMA,CACFL,KAAMK,EADJA,EAEFJ,QAASI,CAFPA,EAGFH,KAAMG,MAHJA,CAfNN,EAoBAO,oEAAMA,CACFN,KAAMM,EADJA,EAEFL,QAASK,CAFPA;AAGFJ,KAAMI,MAHJA,CApBNP,EAyBAQ,oEAAMA,CACFP,KAAMO,EADJA,EAEFN,QAASM,CAFPA,EAGFL,KAAMK,MAHJA,CAzBNR,EA8BAS,oEAAMA,CACFR,KAAMQ,EADJA,EAEFP,QAASO,CAFPA,EAGFN,KAAMM,MAHJA,CA9BNT,EAmCAU,oEAAMA,CACFT,KAAMS,CADJA,EAEFR,QAASQ,CAFPA,EAGFP,KAAMO,EAHJA,CAnCNV;AC+HOW,QAAA,4CAAe,CAAfA,gDAAe,EAACC,qBAAA,GAAqB,CAAA,CAAtB,CAA2B;AAC7C,KAAI;AAAA,QACIC,kBADJ;AAEI,oDAAKC,CAAAA,GAAIC,CAAAA,QAAT,CAAkB,KAAlB,CAAJ,KACIF,kBAEA,GAFS,iBAET,GAF6B,gDAAKG,CAAAA,SAElC,EAAI,gDAAKC,CAAAA,WAAT,KAKIJ,kBALJ,IAKc,wBALd,GAKyC,gDAAKI,CAAAA,WAL9C,CAHJ;AAUC,QACGC,kBAAe,gDAAKJ,CAAAA,GADvB;AAEGF,yBAAJ,KACIM,eADJ,IACoB,cADpB;AAEC,QACGC,aAAU,IAAIC,SAAJ,CAAcF,eAAd,EAA4BL,kBAA5B,CADb;AAEDM,cAAQE,CAAAA,MAAR,GAAiB,EAAAC,IAAQ;AACrB,sDAAKC,CAAAA,GAAL,CAAc,WAAd,CAAA;AACA,sDAAKC,CAAAA,GAAUC,CAAAA,aAAf,EAAA;AACA,UAAIN,UAAJ,KAAgB,gDAAKO,CAAAA,GAArB,CAAyB;AACrB,aAAK,MAAMC,iBAAX,IAA6B,gDAAKC,CAAAA,GAAlC;AACQD,2BAAeE,CAAAA,KAAnB,GACIV,UAAQW,CAAAA,IAAR,CAAaH,iBAAeE,CAAAA,KAA5B,CADJ,GAGIV,UAAQW,CAAAA,IAAR,CAAaC,IAAKC,CAAAA,SAAL,CAAeL,iBAAf,CAAb,CAHJ;AADJ;AAOA,aAAK,MAAMA,0BAAX,IAA6B,gDAAKM,CAAAA,GAAlC;AACSC,8DAAL,CAAAA,gDAAA,EAA8BP,0BAA9B,CAAA;AADJ;AAGA,wDAAKM,CAAAA,GAAL,GAAe,EAAf;AAXqB;AAHJ,KAAzB;AAiBAd,cAAQgB,CAAAA,OAAR,GAAkBC,iBAAAC,IAAQ;AACtB,sDAAKd,CAAAA,GAAL,CAAc,WAAd,CAAA;AACA,sDAAKC,CAAAA,GAAUc,CAAAA,cAAf,CAA4B,CACxBC,MAAO,gDAAKC,CAAAA,GADY,EAExBC,KAAML,iBAAMK,CAAAA,IAFY,EAGxBC,OAAQN,iBAAMM,CAAAA,MAHU,EAIxBC,SAAUP,iBAAMO,CAAAA,QAJQ,CAA5B,CAAA;AAMIxB,gBAAJ,KAAgB,gDAAKO,CAAAA,GAArB,KACI,gDAAKA,CAAAA,GADT,GACckB,IAAAA,EADd;AAGA,sDAAKJ,CAAAA,GAAL,GAAkB,CAAA,CAAlB;AAXsB,KAA1B;AAaArB,cAAQ0B,CAAAA,OAAR,GAAkB,EAAAC,IAAQ;AACtB,sDAAKvB,CAAAA,GAAL,CAAc,WAAd,CAAA;AACA,sDAAKiB,CAAAA,GAAL,GAAkB,CAAA,CAAlB;AAFsB,KAA1B;AAIArB,cAAQ4B,CAAAA,SAAR,GAAoBX,6CAAAY,IAAQ;AACpBC,mDAAAA,GAAsBlB,IAAKmB,CAAAA,KAAL,CAAWd,6CAAMe,CAAAA,IAAjB,CAAtBF;AACA,sDAAKG,CAAAA,iBAAT,IACSC,+CAAL,CAAAA,gDAAA,CADJ;AAGoBT,UAAAA,EAApB,KAAIK,6CAAMK,CAAAA,KAAV,IAAkC,gDAAKF,CAAAA,iBAAvC,KACI,gDAAKA,CAAAA,iBAEL,GAFyB,CAAA,CAEzB,EADA,gDAAK7B,CAAAA,GAAL,CAAc,WAAd,CACA,EAAK8B,+CAAL,CAAAA,gDAAA,CAHJ;AAKA,UAAUE,CAANN,6CAAMM,CAAAA,EAAV;AAKA,YAAI,gDAAKH,CAAAA,iBAAT,CAA4B;AACxB,cAAkBR,IAAAA,EAAlB,KAAIK,6CAAMO,CAAAA,GAAV,CAAA;AACkCA,gBAAAA,yBAANP,6CAAMO,CAAAA,GAAAA;AAzH9C,iBAAK,IAAIC,uBAyHOC,gDAzHE9B,CAAAA,GAAgB+B,CAAAA,MAAzBF,GAAkC,CAA3C,EAAmD,CAAnD,IAA8CA,oBAA9C,EAAsDA,oBAAA,EAAtD;AAyHgBC,8DAxHH9B,CAAAA,GAAL,CAAqB6B,oBAArB,CAAwBH,CAAAA,KAA5B,IAAsCE,sBAAtC,IAwHYE,gDAtHH9B,CAAAA,GAAgBgC,CAAAA,MAArB,CAA4BH,oBAA5B,EAA+B,CAA/B,CAFJ;AADJ;AAwHY;AAIoBb,cAAAA,EAApB,KAAIK,6CAAMK,CAAAA,KAAV,IAEQ,gDAAKO,CAAAA,gBArFzB,GAqF4CZ,6CAAMK,CAAAA,KArFlD,KAsFoB,gDAAK9B,CAAAA,GAAUsC,CAAAA,gBAAf,CAA8Bb,6CAA9B,CACA,EAAA,gDAAKY,CAAAA,gBAAL,GAAwBZ,6CAAMK,CAAAA,KAvFlD,GAyFgBS,gDAzFPrC,CAAAA,GAAT,KAIQ8B,6CAEJ;AAFUzB,cAAKC,CAAAA,SAAL,CAHiBgC,CACvBR,IAuFQO,gDAvFEF,CAAAA,gBADaG,CAGjB,CAEV,EAmFYD,gDApFPxC,CAAAA,GAAL,CAAc,WAAd,GAA2BiC,6CAA3B,CACA,EAmFYO,gDAnFPrC,CAAAA,GAAGI,CAAAA,IAAR,CAAa0B,6CAAb,CANJ,CAmFY,IAOyBZ,IAAAA,EAPzB,KAOWK,6CAAMO,CAAAA,GAPjB,IAUI,gDAAKhC,CAAAA,GAAUsC,CAAAA,gBAAf,CAA8Bb,6CAA9B,CAVJ;AALwB,SAA5B;AAkBI,0DAAKzB,CAAAA,GAAUsC,CAAAA,gBAAf,CAA8Bb,6CAA9B,CAAA;AAlBJ;AALA;AAVwB,KAA5B;AAoCA,oDAAKvB,CAAAA,GAAL,GAAUP,UAAV;AAxFA,GAyFF,QAAO8C,MAAP,CAAY;AACV,oDAAKvC,CAAAA,GACL,GADUkB,IAAAA,EACV,EAAA,gDAAKsB,CAAAA,GAAL,CAAiB,gCAAjB,GAAoDD,MAApD,CAAA;AAFU;AA1F+B;AAnEzCE,QAAA,kDAAqB,CAArBA,sDAAqB,CAAA;AACO,GAAhC,KAAI,sDAAKC,CAAAA,GAAT,KACIC,IAAKC,CAAAA,YAAL,CAAkB,sDAAKF,CAAAA,GAAvB,CACA,EAAA,sDAAKA,CAAAA,GAAL,GAA0B,CAF9B;AADyB;AAOrBf,QAAA,gDAAmB,CAAnBA,oDAAmB,CAAA;AAClBc,mDAAL,CAAAA,oDAAA,CAAA;AACA,sDAAKC,CAAAA,GAAL,GAA0BC,IAAKE,CAAAA,UAAL,CACtB,EAAA,IAAM;AAlB8B,QAAAC,sBAAA;AAkB9BC,wDAjBLlD,CAAAA,GAAL,CAAc,WAAd,IAAkC,IAAP,MAAAiD,sBAAA,GAiBjBC,oDAjBsB/C,CAAAA,GAAL,KAAO,IAAA,EAAP,KAAO8C,sBAAP,GAAO,IAAA,EAAP,GAAOA,sBAAEE,CAAAA,UAApC,EAAA;AAiBUD,wDAhBA/C,CAAAA,GAAV,IACSf,2CAAL,CAeM8D,oDAfN,EAAqB,CAAA,CAArB,CADJ;AAGKpB,mDAAL,CAaUoB,oDAbV,CAAA;AAaU,GADgB,EAEtB,IAFsB,CAA1B;AAFuB;AAwBnBvC,QAAA,qDAAwB,CAAxBA,yDAAwB,EAACiB,iBAAD,CAAmB;AAC5BP,MAAAA,EAAnB,KAAIO,iBAAKG,CAAAA,KAAT,IAAgC,yDAAKF,CAAAA,iBAArC,IAPmBR,IAAAA,EAOnB,KACuBO,iBARdG,CAAAA,KAOT,IACIqB,yDANK/C,CAAAA,GAAgBgD,CAAAA,IAArB,CAMmBzB,iBANnB,CAKJ;AAGI,2DAAKzB,CAAAA,GAAT,KACQyB,iBAAKtB,CAAAA,KAAT,GACI,yDAAKH,CAAAA,GAAGI,CAAAA,IAAR,CAAaqB,iBAAKtB,CAAAA,KAAlB,CADJ,GAGI,yDAAKH,CAAAA,GAAGI,CAAAA,IAAR,CAAaC,IAAKC,CAAAA,SAAL,CAAemB,iBAAf,CAAb,CAJR;AAJ+C;AAxFvD,IAAA0B,uDAAA,KAAA;AAYIC,aAAA,EAGkD;AC8TnC,QAAA,2CAAA,CACPhB,iBAAgBiB,yDADT,EAEPtD,cAAauD,sDAFN,EAGP1C,eAAc2C,uDAHP,EAIPC,iBAAgBC,yDAJT,CAAA,EAODC,sCAAAA,qDAPC,EAQIC,2CAAAA,wDARJ;ADhUH,QAAArE,CAAAA,SAAA,GC+TkBA,kDD/TlB;AACA,QAAAC,CAAAA,WAAA,GC8T6BA,ED9T7B;AAXJ,QAAAmC,CAAAA,iBAAA,GADA,IAAAZ,CAAAA,GACA,GADsB,CAAA,CACtB;AACA,QAAAZ,CAAAA,GAAA,GAAkC,EAAlC;AACA,QAAAK,CAAAA,GAAA,GAA0B,EAA1B;AAKA,QAAA4B,CAAAA,gBAAA,GADA,IAAAO,CAAAA,GACA,GAD6B,CAC7B;AACA,QAAAtD,CAAAA,GAAA,GAAc,EAAd;AAMJ,QAAKS,CAAAA,GAAL,GAAmD+D,mCAAnD;AACA,QAAKpB,CAAAA,GAAL,GAAsDqB,wCAAtD;AACA,QAAK/D,CAAAA,GAAL,GAAwCA,wCAAxC;AAJ8C;AAO3CgE,YAAU,CACb1E,gBADa,EAEb+C,mBAFa,EAGbT,oBAHa,EAIbxC,YAAA,GAAqB,CAAA,CAJR,CAIa;AAE1B,QAAKE,CAAAA,GAAL,GAAWA,gBAAX;AACA,QAAK+C,CAAAA,gBAAL,GAAwBA,mBAAxB;AACA,QAAKT,CAAAA,iBAAL,GAAyBA,oBAAzB;AACKzC,+CAAL,CAAAA,IAAA,EAAqBC,YAArB,CAAA;AACA,QAAKW,CAAAA,GAAL,CAAc,WAAd,CAAA;AAN0B;AASvBkE,cAAY,CAACC,YAAD,CAAmB;AAAA,QAAAlB,KAAA;AAClC,QAAKX,CAAAA,gBAAL,GAAwB,CAAxB;AACA,QAAKT,CAAAA,iBAAL,GAAyB,CAAA,CAAzB;AACA,QAAKxB,CAAAA,GAAL,GAAuB,EAAvB;AACA,QAAKK,CAAAA,GAAL,GAAe,EAAf;AACKkC,qDAAL,CAAAA,IAAA,CAAA;AACO,QAAP,MAAAK,KAAA,GAAA,IAAK9C,CAAAA,GAAL,KAAO,IAAA,EAAP,KAAO8C,KAAP,GAAO,IAAA,EAAP,GAAOA,KAAEmB,CAAAA,KAAF,CAAQD,YAAR,CAAP;AACA,QAAKnE,CAAAA,GAAL,CAAc,WAAd,GAA2BmE,YAA3B,CAAA;AAPkC;AAU/B9E,WAAS,EAAA;AACPD,+CAAL,CAAAA,IAAA,EAAqB,CAAA,CAArB,CAAA;AADY;AAwDTmB,MAAI,CAACqB,iBAAD,CAAmB;AACrB,QAAKC,CAAAA,iBAAV,IAAgC,IAAK1B,CAAAA,GAArC,IACSf,2CAAL,CAAAA,IAAA,EAAqB,CAAA,CAArB,CADJ;AAII,QAAKe,CAAAA,GAAT,IAAe,IAAKA,CAAAA,GAAGgD,CAAAA,UAAvB,KAAsCtD,SAAUwE,CAAAA,IAAhD,GACS1D,oDAAL,CAAAA,IAAA,EAA8BiB,iBAA9B,CADJ,GAGI,IAAKlB,CAAAA,GAAQ2C,CAAAA,IAAb,CAAkBzB,iBAAlB,CAHJ;AAL0B;AArGlC,CAAA;ACKgD,MAE1C0C,+CAAcxB,IAF4B;AAiBX,IAEjCyB,iDAAgB,EAFiB,EAGjCC,wDAA8B,EAHG;AFkC1BC,QAAA,sCAAS,CAACC,SAAD,CAAoB;AAA7BD,MAAAA,6CEiUKE,0DFjULF;AAA6B,MAC5BG,sBAAS,0CAAKC,CAAAA,GAASC,CAAAA,GAAd,CAAkBJ,SAAOK,CAAAA,IAAzB,CADmB;AAE3BH,qBAAL,KACIA,mBACA,GADS,EACT,EAAA,0CAAKC,CAAAA,GAASG,CAAAA,GAAd,CAAkBN,SAAOK,CAAAA,IAAzB,EAA+BH,mBAA/B,CAFJ;AAIA,OAAK,MAAMK,mBAAX,IAAsBP,SAAOpE,CAAAA,KAA7B;AACIsE,uBAAQvB,CAAAA,IAAR,CAAa4B,mBAAb,CAAA;AADJ;AANgC;AA0C5BC,QAAA,2CAAc,CAACH,kBAAD,CAAgB;AAClC,SAAQA,kBAAR;AACI,SAAA,CAAA;AACI,aAAmBI,iEAAnB;AACJ,SAAA,CAAA;AACI,aAAmBC,iEAAnB;AACJ,SAAA,CAAA;AACI,aAAmBC,iEAAnB;AACJ,SAAA,CAAA;AACI,aAAmBC,iEAAnB;AACJ,SAAA,CAAA;AACI,aAAmBC,iEAAnB;AACJ,SAAA,CAAA;AACI,aAAmBC,iEAAnB;AACJ,SAAA,CAAA;AACI,aAAmBC,iEAAnB;AACJ;AACI,aAAmBC,iEAAnB;AAhBR;AADkC;AEzEN,IAChCf,6DAAuC,IFa3CgB,KAAA;AAEIpC,aAAA,EAAA;AADQ,QAAAsB,CAAAA,GAAA,GAAW,IAAIe,GAAJ,EAAX;AAEJC,QAmCKhB,CAAAA,GAASiB,CAAAA,KAAd,EAAA;AApCJ;AAIOpH,MAAI,EAAA;AAAA,QACHqH,eAAY,CADT;AAEP,SAAK,IAAI,CAAA,EAAMC,gCAAN,CAAT,IAAyB,IAAKnB,CAAAA,GAA9B,CAAwC;AAA3B,UAAEoB,oBAAKD,gCAAP;AACT,WAAK,IAAIE,kBAAT,IAAkBD,iBAAlB;AACIF,oBAAA,IAAaG,kBAAMC,CAAAA,UAAnB;AADJ;AADoC;AAMxC,WADAJ,YACA,IA1DuBK,CA0DvB,GADa,IAAKvB,CAAAA,GAASnG,CAAAA,IAC3B;AARO;AAsBJ2H,OAAK,CAACC,gBAAD,EAAmBC,uEAAnB,CAAsC;AAAA,QAC1CC,4EAASD,uEADiC;AAE9C,SAAK,IAAI,CAACE,8BAAD,EAAMC,sCAAN,CAAT,IAA+B,IAAK7B,CAAAA,GAApC,CAA8C;AAA/B8B,6EAAAA,GAAWD,sCAAXC;AACXH,UAAAA,mEAAAA,yEAAAA,EAAkCA,mDAAAA,yEAAlCA;AAA2DpE,+EAAAA,GAAZuE,uEAAYvE,CAAAA,MAAAA;AAc3C,UAEhBwE,wDAAc1B,0CAAL,CAjBAuB,8BAiBA,CAFO;AAEkB,UAClCI,gCAAYD,qDAAOhI,CAAAA,IADe,EAElCkI,qCAAiB,IAAIC,QAAJ,CAlBWT,gBAkBO1B,CAAAA,MAAlB,CAFiB;AAGtC,WAAK,IAAI1C,wBAAI,CAAb,EAAoB,CAApB,GAAgBA,qBAAhB,EAAuBA,qBAAA,EAAvB;AACI4E,0CAAeE,CAAAA,QAAf,CAAwBR,gDAAxB,GAAiCtE,qBAAjC,EAAoC2E,6BAAUI,CAAAA,UAAV,CAAqB/E,qBAArB,CAApC,CAAA;AADJ;AAGA4E,wCAAeE,CAAAA,QAAf,CAAwBR,gDAAxB,GAAiC,CAAjC,EAAoCI,qDAAOjI,CAAAA,OAA3C,CAAA;AACAmI,wCAAeI,CAAAA,SAAf,CAAyBV,gDAAzB,GAAkC,CAAlC,EAAqCW,yEAArC,EAAmD,CAAA,CAAnD,CAAA;AACAL,wCAAeI,CAAAA,SAAf,CAAyBV,gDAAzB,GAAkC,CAAlC,EAAqCI,qDAAOlI,CAAAA,IAA5C,EAAkD,CAAA,CAAlD,CAAA;AAvBI8H,sEAAAA,GADAA,yEACAA,GADAA,gEACAA,GA5EmBJ,CA4EnBI;AAAkCF,sDAAAA,GAAAA,gBAAAA;AAiDlCc,2DAAAA,GAAY,CAAZA;AACJ,WAAK,IAAIlB,yBAAT,IAAkBmB,uEAAlB;AACQC,+EAEJ,GAFU,IAAIC,UAAJ,CAAerB,yBAAf,CAEV,EADAI,gDAAKtB,CAAAA,GAAL,CAASsC,uEAAT,EAAcd,yEAAd,GAAuBY,qDAAvB,CACA,EAAAA,qDAAA,IAAalB,yBAAMC,CAAAA,UAAnB;AAHJ;AAlDIK,+EAAA,GAAAA,gEAAA,GAuDGY,qDAvDH;AAF0C;AAI9C,WAAOZ,yEAAP;AAN8C;AA5BtD,CEb2C,EADP,EAEhC/G,qDAAoB,EAFY,EAGhCF,+CAAc,EAHkB,EAIhCiI,0DAAqC,IAJL,EAKhCC,qDAAuCpG,IAAAA,EALP,EAMhCqG,4DAA2B,CANK,EAOhCC,4DAA6C,EAPb,EAQhCC,wDAA8B,EARE,EAShCC,6DAAyC,EATT,EAUhCC;AAAmD,EAVnB,EAWhCjG,6DAAoB,CAAA,CAXY,EAYhCkG,mEAA0B,CAZM;AAcpClE,QAASA,sDAAY,CAACmE,SAAD,CAAe;AAIhC1D,8CAAI2D,CAAAA,WAAJ,CAH0BC,CACtBC,IAAKH,SADiBE,CAG1B,CAAA;AAJgC;AAUpCpE,QAASA,yDAAe,CAACsE,SAAD,CAAe;AAInC9D,8CAAI2D,CAAAA,WAAJ,CAH0BC,CACtBlE,UAAWoE,SADWF,CAG1B,CAAA;AAJmC;AAOvCG,QAASA,yDAAe,EAAA;AACpB9D,gDAAA,GAAQ,EAAR;AACAC,uDAAA,GAAe,EAAf;AACAG,4DFkBSE,CAAAA,GAASiB,CAAAA,KAAd,EAAA;AEjBJ6B,2DAAA,GAAmB,EAAnB;AACAC,uDAAA,GAAe,EAAf;AACAC,4DAAA,GAAoB,EAApB;AACAC,iEAAA,GAAyB,EAAzB;AAPoB;AAUxBQ,QAASA,0DAAgB,CACrBxB,0BADqB,EAErBN,mBAFqB,EAGrBK,qBAHqB,EAIrBlI,mBAJqB,EAKrBwI,wBALqB,EAMrBoB,gBANqB,CAMA;AAErB,OAAK,IAAIrG,gBAAI,CAAb,EAAoB,CAApB,GAAgBA,aAAhB,EAAuBA,aAAA,EAAvB;AACI4E,8BAAeE,CAAAA,QAAf,CAAwBR,mBAAxB,GAAiCtE,aAAjC,EAAoC2E,qBAAUI,CAAAA,UAAV,CAAqB/E,aAArB,CAApC,CAAA;AADJ;AAGA4E,4BAAeE,CAAAA,QAAf,CAAwBR,mBAAxB,GAAiC,CAAjC,EAAoC7H,mBAApC,CAAA;AACAmI,4BAAeI,CAAAA,SAAf,CAAyBV,mBAAzB,GAAkC,CAAlC,EAAqCW,wBAArC,EAAmD,CAAA,CAAnD,CAAA;AACAL,4BAAeI,CAAAA,SAAf,CAAyBV,mBAAzB,GAAkC,CAAlC,EAAqC+B,gBAArC,EAAoD,CAAA,CAApD,CAAA;AAPqB;AA2EzBC,QAASA,iDAAO,CAACC,eAAD,CAAY;AACxB,SAAU,CAAV,GAAIA,eAAJ,GACWC,IAAKC,CAAAA,GAAL,CAASF,eAAT,EAAc,CAAC,UAAf,CADX,GAGOC,IAAKE,CAAAA,GAAL,CAASH,eAAT,EAAc,UAAd,CAHP;AADwB;AAwB5BI,QAASA,oDAAU,EAAA;AACf,OAAKtE,8CAAMnC,CAAAA,MAAX,IAAqBoC,qDAAapC,CAAAA,MAAlC,KAA6CoF,uDAA7C;AACI,OAAI;AACAA,6DAAezF,CAAAA,KAAf,GAAuBF,0DAAA,GAAoBkG,gEAApB,GAA8C1G,IAAAA,EAArE;AAA+E,UACzE/B,sCAASkB,IAAKC,CAAAA,SAAL,CAAe+G,uDAAf,CADgE;AAEzEsB,wBAAAA,GAAMxJ,mCAAO8C,CAAAA,MAAb0G;AACAC,4DAAAA,GAAWD,kBAAXC,GAAiB,CAAjBA;AAAkB,UAClBC,6DAAoB,IAAIC,WAAJ,CAAgBF,sDAAhB,CADF;AAC2B,YAC7CG,gBAAa,IAAInC,QAAJ,CAAaiC,0DAAb,CADgC;AAEnDE,mBAAWhC,CAAAA,SAAX,CAAqB,CAArB,EAAwB4B,kBAAxB,CAAA;AACA,WAAK,IAAI5G,qBAAI,CAAb,EAAgBA,kBAAhB,GAAoB6G,sDAApB,EAA8B,EAAE7G,kBAAhC;AACIgH,qBAAWlC,CAAAA,QAAX,CAAoB9E,kBAApB,EAAuB5C,mCAAO2H,CAAAA,UAAP,CAAkB/E,kBAAlB,GAAsB,CAAtB,CAAvB,CAAA;AADJ;AAGMiH,kFAAAA,GAAoB,IAAI5B,UAAJ,CAAeyB,0DAAf,CAApBG;AACAC,wEAAAA,GAzKIC,EAyKJD,GAA+B7E,8CAAMnC,CAAAA,MAArCgH;AACAE,kGAAAA,GAzKKC,EAyKLD,GAAkC9E,qDAAapC,CAAAA,MAA/CkH;AACAE,iFAAAA,GAxKgBC,EAwKhBD,GAA+C7B,yDAAiBvF,CAAAA,MAAhEoH;AACAE,4EAAAA,GAxKMC,EAwKND,GAAqC9B,qDAAaxF,CAAAA,MAAlDsH;AACAE,6DAAAA,GAxKYC,EAwKZD,GAA+C/B,0DAAkBzF,CAAAA,MAAjEwH;AAAuE,YACvEE,+BAxKiBC,EAwKjBD,GAC2BhC,+DAAuB1F,CAAAA,MAFqB;AAEf,UAC1D2D,wBAjLQiE,CAiLRjE,GAA8BoD,4EAAkB/G,CAAAA,MADU;AAE1DgH,wEAAJ,KACIrD,qBADJ,IAlLYiE,CAkLZ,GACmCZ,kEADnC;AAGIE,kGAAJ,KACIvD,qBADJ,IArLYiE,CAqLZ,GACmCV,4FADnC;AAGIE,iFAAJ,KACIzD,qBADJ,IAxLYiE,CAwLZ,GACmCR,2EADnC;AAGIE,4EAAJ,KACI3D,qBADJ,IA3LYiE,CA2LZ,GACmCN,sEADnC;AAGIE,6DAAJ,KACI7D,qBADJ,IA9LYiE,CA8LZ,GACmCJ,uDADnC;AAGIE,kCAAJ,KACI/D,qBADJ,IAjMYiE,CAiMZ,GACmCF,4BADnC;AAIA/D,2BAAA,IAAapB,0DAAkBjG,CAAAA,IAAlB,EAAb;AAAsC,YAChCuL,gBAAa,IAAIhB,WAAJ,CAAgBlD,qBAAhB,CADmB;AAEhCe,wDAAAA,GAAiB,IAAIC,QAAJ,CAAakD,aAAb,CAAjBnD;AACFN,yCAAAA,GAAS,CAATA;AACuBxB,OAA3B,IAAIuC,UAAJ,CAAe0C,aAAf,CAA2BjF,EAAAA,GAA3B,CAA+BmE,4EAA/B,CAAA;AACA3C,yCAAA,IAAU2C,4EAAkB/G,CAAAA,MAA5B;AACAkG,+DAAA,CAAiBxB,kDAAjB,EAAiCN,mCAAjC,EAAyC,MAAzC,EAAiD,CAAjD,EAAoD,CAApD,EAAuD,CAAvD,CAAA;AACAA,yCAAA,IA5MYwD,CA4MZ;AACA,UAAIZ,kEAAJ,CAAkB;AACdd,iEAAA,CAAiBxB,kDAAjB,EAAiCN,mCAAjC,EAAyC,MAAzC,EAAiD,CAAjD,EAAoDjC,8CAAMnC,CAAAA,MAA1D,EA7MMiH,EA6MN,CAAA;AACA7C,2CAAA,IA/MQwD,CA+MR;AACUlD,YAAAA,+EAAAA,kDAAAA,EAAgBN,yDAAAA,mCAAhBM;AA5ItB,aAAS5E,0DAAT,GAAa,CAAb,EAAgBA,0DAAhB,GAAoBqC,8CAAMnC,CAAAA,MAA1B,EAAkCF,0DAAA,EAAlC;AACI4E,sFAAeoD,CAAAA,UAAf,CAA0B1D,sDAA1B,EAAkCjC,8CAAA,CAAMrC,0DAAN,CAASiI,CAAAA,KAA3C,EAAkD,CAAA,CAAlD,CAMA,EAHArD,4EAAeI,CAAAA,SAAf,CAAyBV,sDAAzB,GAAkC,CAAlC,EAAqCkC,IAAKE,CAAAA,GAAL,CAA2B,IAA3B,GAASrE,8CAAA,CAAMrC,0DAAN,CAASkI,CAAAA,MAAlB;AAAiC,eAAjC,CAArC,EAA+E,CAAA,CAA/E,CAGA,EAFAtD,4EAAeI,CAAAA,SAAf,CAAyBV,sDAAzB,GAAkC,EAAlC,EAAsCkC,IAAKE,CAAAA,GAAL,CAA6B,IAA7B,GAASrE,8CAAA,CAAMrC,0DAAN,CAASmI,CAAAA,QAAlB,EAAmC,KAAnC,CAAtC,EAAkF,CAAA,CAAlF,CAEA,EADAvD,4EAAeE,CAAAA,QAAf,CAAwBR,sDAAxB,GAAiC,EAAjC,EAAqCjC,8CAAA,CAAMrC,0DAAN,CAASoI,CAAAA,SAA9C,CACA;AAAA9D,gEAAA,IA1Ec6C,EA0Ed;AAPJ;AA6IY7C,2CAAA,IAAU4C,kEAAV;AAJc;AAMlB,UAAIE,4FAAJ,CAAoB;AAChBhB,iEAAA,CACIxB,kDADJ,EAEIN,mCAFJ,EAGI,MAHJ,EAII,CAJJ,EAKIhC,qDAAapC,CAAAA,MALjB,EAlNOmH,EAkNP,CAAA;AAQA/C,2CAAA,IA5NQwD,CA4NR;AACkBlD,YAAAA,qEAAAA,kDAAAA;AAAgBN,oFAAAA,GAAAA,mCAAAA;AAlI9C,aAAStE,sDAAT,GAAa,CAAb,EAAgBA,sDAAhB,GAAoBsC,qDAAapC,CAAAA,MAAjC,EAAyCF,sDAAA,EAAzC,CAA8C;AAC1C4E,4EAAeoD,CAAAA,UAAf,CAA0B1D,4EAA1B,EAAkChC,qDAAA,CAAatC,sDAAb,CAAgBqI,CAAAA,EAAlD,EAAsD,CAAA,CAAtD,CAAA;AACS/D,sFAAT,IAAkB,CAAlB;AACIgE,iFAAAA,GAAWhG,qDAAA,CAAatC,sDAAb,CAAgBuI,CAAAA,SAA3BD;AAEJ,eADIE,0DACJ,GADQ,CACR,EAAOA,0DAAP,GAAWF,uEAASpI,CAAAA,MAApB,IAAkC,EAAlC,GAA8BsI,0DAA9B,EAAsCA,0DAAA,EAAtC;AACI5D,8EAAeE,CAAAA,QAAf,CAAwBR,4EAAxB,GAAiCkE,0DAAjC,EAAoCF,uEAASvD,CAAAA,UAAT,CAAoByD,0DAApB,CAApC,CAAA;AADJ;AAGA5D,4EAAeE,CAAAA,QAAf,CAAwBR,4EAAxB,GAAiCkE,0DAAjC,EAAoC,CAApC,CAAA;AACSlE,sFAAT,IAAkB,EAAlB;AAT0C;AAmIlCA,2CAAA,IAAU8C,4FAAV;AAXgB;AAapB,UAAIE,2EAAJ,CAAsB;AAClBlB,iEAAA,CACIxB,kDADJ,EAEIN,mCAFJ,EAGI,MAHJ,EAII,CAJJ,EAKImB,yDAAiBvF,CAAAA,MALrB,EA7NkBqH,EA6NlB,CAAA;AASAjD,2CAAA,IA1OQwD,CA0OR;AACalD,YAAAA,+FAAAA,kDAAAA,EAAgBN,0EAAAA,mCAAhBM;AA3JzB,aAAS5E,kEAAT,GAAa,CAAb,EAAgBA,kEAAhB,GAAoByF,yDAAiBvF,CAAAA,MAArC,EAA6CF,kEAAA,EAA7C;AACI4E,sGAAeE,CAAAA,QAAf,CAAwBR,uEAAxB,EAAgCmB,yDAAA,CAAiBzF,kEAAjB,CAAoByI,CAAAA,YAApD,CAKA,EAJA7D,4FAAeE,CAAAA,QAAf,CAAwBR,uEAAxB;AAAiC,WAAjC,EAAoCmB,yDAAA,CAAiBzF,kEAAjB,CAAoB0I,CAAAA,cAAxD,CAIA,EAHA9D,4FAAeE,CAAAA,QAAf,CAAwBR,uEAAxB,GAAiC,CAAjC,EAAoCmB,yDAAA,CAAiBzF,kEAAjB,CAAoB2I,CAAAA,YAAxD,CAGA,EAFA/D,4FAAeE,CAAAA,QAAf,CAAwBR,uEAAxB;AAAiC,WAAjC,EAAoCmB,yDAAA,CAAiBzF,kEAAjB,CAAoB4I,CAAAA,gBAAxD,CAEA,EADAhE,4FAAeoD,CAAAA,UAAf,CAA0B1D,uEAA1B,GAAmC,CAAnC,EAAsCmB,yDAAA,CAAiBzF,kEAAjB,CAAoB6I,CAAAA,SAA1D,EAAqE,CAAA,CAArE,CACA,EAAAvE,uEAAA;AAlF0BiD,YAkF1B;AANJ;AA4JYjD,2CAAA,IAAUgD,2EAAV;AAZkB;AActB,UAAIE,sEAAJ,CAAsB;AAClBpB,iEAAA,CACIxB,kDADJ,EAEIN,mCAFJ,EAGI,MAHJ,EAII,CAJJ,EAKIoB,qDAAaxF,CAAAA,MALjB,EA1OQuH,EA0OR,CAAA;AAQAnD,2CAAA,IAvPQwD,CAuPR;AACsBlD,YAAAA,8EAAAA,kDAAAA;AAAgBN,oGAAAA,GAAAA,mCAAAA;AA5IlD,aAAStE,uEAAT,GAAa,CAAb,EAAgBA,uEAAhB,GAAoB0F,qDAAaxF,CAAAA,MAAjC,EAAyCF,uEAAA,EAAzC;AACI4E,qFAAeoD,CAAAA,UAAf,CAA0B1D,4FAA1B,EAAkCoB,qDAAA,CAAa1F,uEAAb,CAAgB6I,CAAAA,SAAlD,EAA6D,CAAA,CAA7D,CAES,EADTjE,2EAAeI,CAAAA,SAAf,CAAyBV,4FAAzB;AAAkC,WAAlC,EAAqCkC,IAAKE,CAAAA,GAAL,CAAShB,qDAAA,CAAa1F,uEAAb,CAAgB8I,CAAAA,QAAzB,EAAmC,KAAnC,CAArC,EAAiF,CAAA,CAAjF,CACS,EAAAxE,4FAAA,IA1GOmD,EA0GhB;AAHJ;AA6IYnD,2CAAA,IAAUkD,sEAAV;AAXkB;AAatB,UAAIE,uDAAJ,CAA0B;AACtBtB,iEAAA,CACIxB,kDADJ,EAEIN,mCAFJ,EAGI,MAHJ,EAII,CAJJ,EAKIqB,0DAAkBzF,CAAAA,MALtB,EAtPcyH,EAsPd,CAAA;AAQArD,2CAAA,IApQQwD,CAoQR;AACuBlD,YAAAA,yEAAAA,kDAAAA;AAAgBN,mFAAAA,GAAAA,mCAAAA;AAjJnD,aAAStE,4FAAT,GAAa,CAAb,EAAgBA,4FAAhB,GAAoB2F,0DAAkBzF,CAAAA,MAAtC,EAA8CF,4FAAA,EAA9C;AACI4E,gFAAeoD,CAAAA,UAAf,CAA0B1D,2EAA1B,EAAkCqB,0DAAA,CAAkB3F,4FAAlB,CAAqB6I,CAAAA,SAAvD,EAAkE,CAAA,CAAlE,CAWA,EAVAjE,sEAAeI,CAAAA,SAAf,CACIV,2EADJ,GACa,CADb,EAEIkC,IAAKE,CAAAA,GAAL,CAASf,0DAAA,CAAkB3F,4FAAlB,CAAqB+I,CAAAA,cAA9B;AAA8C,eAA9C,CAFJ,EAGI,CAAA,CAHJ,CAUA,EALAnE,sEAAeI,CAAAA,SAAf,CACIV,2EADJ,GACa,EADb,EAEIkC,IAAKE,CAAAA,GAAL,CAASf,0DAAA,CAAkB3F,4FAAlB,CAAqBgJ,CAAAA,kBAA9B,EAAkD,KAAlD,CAFJ,EAGI,CAAA,CAHJ,CAKA,EAAA1E,2EAAA,IA1HsBqD,EA0HtB;AAZJ;AAkJYrD,2CAAA,IAAUoD,uDAAV;AAXsB;AAa1B,UAAIE,4BAAJ,CAA+B;AAC3BxB,iEAAA,CACIxB,kDADJ,EAEIN,mCAFJ,EAGI,MAHJ,EAII,CAJJ,EAKIsB,+DAAuB1F,CAAAA,MAL3B,EAlQmB2H,EAkQnB,CAAA;AAQAvD,2CAAA,IAjRQwD,CAiRR;AAC4BlD,YAAAA,0DAAAA,kDAAAA,EAAgBN,qDAAAA,mCAAhBM;AAtIxC,aAAS5E,sEAAT,GAAa,CAAb,EAAgBA,sEAAhB,GAAoB4F,+DAAuB1F,CAAAA,MAA3C,EAAmDF,sEAAA,EAAnD;AACI4E,iEAAeoD,CAAAA,UAAf,CAA0B1D,kDAA1B,EAAkCsB,+DAAA,CAAuB5F,sEAAvB,CAA0B6I,CAAAA,SAA5D,EAAuE,CAAA,CAAvE,CAWA,EAVAjE,uDAAeqE,CAAAA,QAAf,CACI3E,kDADJ,GACa,CADb,EAEIgC,gDAAA,CAAQV,+DAAA,CAAuB5F,sEAAvB,CAA0BkJ,CAAAA,iBAAlC,CAFJ;AAGI,WAAA,CAHJ,CAUA,EALAtE,uDAAeqE,CAAAA,QAAf,CACI3E,kDADJ,GACa,EADb,EAEIgC,gDAAA,CAAQV,+DAAA,CAAuB5F,sEAAvB,CAA0BmJ,CAAAA,kBAAlC,CAFJ,EAGI,CAAA,CAHJ,CAKA,EAAA7E,kDAAA,IAjJ2BuD,EAiJ3B;AAZJ;AAuIYvD,2CAAA,IAAUsD,4BAAV;AAX2B;AAY9B,UAEGlF,sBAAS,IAAI2C,UAAJ,CAAe0C,aAAf,CAFZ;AAGDtF,gEAAkB0B,CAAAA,KAAlB,CAAwBzB,mBAAxB,EAAgC4B,mCAAhC,CAAA;AACS,UAAT,KAAAiB,kDAAA,IAAS,IAAA,EAAT,KAAAA,kDAAA,GAAS,IAAA,EAAT,GAAAA,kDAAWlH,CAAAA,IAAX,CAAgB,CACZD,MAAO2J,aADK,EAEZlI,MAAOF,0DAAA,GAAoBkG,gEAApB,GAA8C1G,IAAAA,EAFzC,CAAhB,CAAA;AA1HA,KA8HF,QAAOiK,eAAP,CAAY;AACVxH,8DAAA,CACI,0CADJ,GACiDwH,eAAIC,CAAAA,OADrD,GAC+D,UAD/D,GAC4ED,eAAIE,CAAAA,KADhF,CAAA;AADU;AA/HlB;AAqIAnD,0DAAA,EAAA;AAtIe;AAyInB7E,QAASA,0DAAgB,CAAC5B,iBAAD,CAAmB;AACnCC,4DAAL,IAAyCR,IAAAA,EAAzC,KAA0BO,iBAAKG,CAAAA,KAA/B,KACIF,0DADJ,GACwB,CAAA,CADxB;AAIAyC,8CAAI2D,CAAAA,WAAJ,CADiCwD,CAAEC,UAAW9J,iBAAb6J,CACjC,CAAA;AALwC;AAQ5C/H,QAASA,wDAAc,CAAC9B,iBAAD,CAAqB;AAExC0C,8CAAI2D,CAAAA,WAAJ,CADiCwD,CAAEE,QAAS/J,iBAAX6J,CACjC,CAAA;AAFwC;AAK5ChI,QAASA,uDAAa,EAAA;AAElBa,8CAAI2D,CAAAA,WAAJ,CADiCwD,CAAEG,OAAQ,CAAA,CAAVH,CACjC,CAAA;AAFkB;AAKtB7H,QAASA,0DAAgB,EAAA;AAErBU,8CAAI2D,CAAAA,WAAJ,CADiCwD,CAAEI,UAAW,CAAA,CAAbJ,CACjC,CAAA;AAFqB;AAKzBrM,QAASA,yDAAe,CAACkD,4BAAD,EAA2BjD,qBAA3B,CAA8C;AAClEoI,oDAAA,GAAY,IAAInE,oDAAJ,EAAZ;AAYAmE,oDAAUxD,CAAAA,UAAV,CAAqB1E,4CAArB,EAA0B+C,4BAA1B,EAA4CT,0DAA5C,EAA+DxC,qBAA/D,CAAA;AACAuE,2DAAA,EAAA;AAdkE;AAiBtEU,4CAAI9C,CAAAA,SAAJ,GAAgBsK,QAAA,CAAUP,oBAAV,CAA+B;AAC3C,KAAI;AAAA,UACM3J,oBAAsB2J,oBAAQ3J,CAAAA,IADpC;AAEIA,qBAAKmK,CAAAA,WAAT,IACItM,kDACA,GADYmC,iBAAKmK,CAAAA,WAAYtM,CAAAA,SAC7B,EAAAoE,qDAAA,CAAa,WAAb,CAFJ,IAGWjC,iBAAKoK,CAAAA,IAAT,GACHzH,8CAAMlB,CAAAA,IAAN,CAAWzB,iBAAKoK,CAAAA,IAAhB,CADG,GAEIpK,iBAAKqK,CAAAA,WAAT,GACHzH,qDAAanB,CAAAA,IAAb,CAAkBzB,iBAAKqK,CAAAA,WAAvB,CADG,GAEIrK,iBAAKsK,CAAAA,UAAT,IACH1E,uDAOA;AAPiB5F,qBAAKsK,CAAAA,UAAWC,CAAAA,WAOjC,EAFAzE,yDAEA,GAFmB5E,IAAKsJ,CAAAA,WAAL,CAAiB,EAAA,IAAMvD,mDAAA,EAAvB,EA1VRwD,IA0VQ,CAEnB,EADA/H,4CAAI2D,CAAAA,WAAJ,CALiCwD,CAC7Ba,aAAc,CAAA,CADeb,CAKjC,CACA,EAAA5H,qDAAA,CAAa,WAAb,CARG,IASIjC,iBAAK2K,CAAAA,SAAT,IACHzJ,IAAK0J,CAAAA,aAAL,CAAmB9E,yDAAnB,CAGA,EAFAmB,mDAAA,EAEA;AADAR,4DAAA,EACA,EAAAxE,qDAAA,CAAa,WAAb,CAJG,IAKIjC,iBAAK6K,CAAAA,WAAT,IACC7K,iBAAKG,CAAAA,KAGT,KAFIgG,gEAEJ,GAF8BnG,iBAAKG,CAAAA,KAEnC,GAAIH,iBAAK6K,CAAAA,WAAYnM,CAAAA,KAArB,IACsBmE,qCAAlB,CAA4B7C,iBAAK6K,CAAAA,WAAjC,CALD,IAOI7K,iBAAK8K,CAAAA,EAAT,GACH/E,yDAAiBtE,CAAAA,IAAjB,CAAsBzB,iBAAK8K,CAAAA,EAA3B,CADG;AAEI9K,qBAAK+K,CAAAA,cAAT,IACHpN,4CAEA,GAFMqC,iBAAK+K,CAAAA,cAAeC,CAAAA,SAE1B,EADA/K,0DACA,GADoBD,iBAAK+K,CAAAA,cAAe9K,CAAAA,iBACxC,EAAAzC,wDAAA,CAAgBwC,iBAAK+K,CAAAA,cAAerK,CAAAA,gBAApC,EAAsDV,iBAAK+K,CAAAA,cAAetN,CAAAA,SAA1E,CAHG,IAIIuC,iBAAKiL,CAAAA,aAAT,IACM,IAAT,KAAApF,kDAAA,IAAS,IAAA,EAAT;AAAAA,sDAAA,GAAS,IAAA,EAAT,GAAAA,kDAAWvD,CAAAA,YAAX,EACA,EAAArC,0DAAA,GAAoB,CAAA,CAFjB,IAGID,iBAAKrB,CAAAA,IAAT,GACM,IAAT,KAAAkH,kDAAA,IAAS,IAAA,EAAT,KAAAA,kDAAA,GAAS,IAAA,EAAT,GAAAA,kDAAWlH,CAAAA,IAAX,CAAgBqB,iBAAKrB,CAAAA,IAArB,CADG,GAEIqB,iBAAKoJ,CAAAA,QAAT,GACHpD,qDAAavE,CAAAA,IAAb,CAAkBzB,iBAAKoJ,CAAAA,QAAvB,CADG;AAEIpJ,qBAAKiG,CAAAA,iBAAT,GACHA,0DAAkBxE,CAAAA,IAAlB,CAAuBzB,iBAAKiG,CAAAA,iBAA5B,CADG,GAEIjG,iBAAKkG,CAAAA,sBAFT,IAGHA,+DAAuBzE,CAAAA,IAAvB,CAA4BzB,iBAAKkG,CAAAA,sBAAjC,CA5CJ;AAFA,GAgDF,QAAOpF,eAAP,CAAY;AACVoB,4DAAA,CAAgB,8BAAhB,GAAiDpB,eAAjD,CAAA;AADU;AAjD6B,CAA/C","file":"ragnarokworker.js","sourcesContent":["import { WebrtcStats, StatsType } from \"./statsinterfaces\";\n\nexport const ChunkHeaderSize = 9;\nexport const statsConfig = {\n    depr: {\n        size: 70,\n        version: 1,\n        name: \"DEPR\"\n    },\n    rtpv: {\n        size: 80,\n        version: 3,\n        name: \"RTPV\"\n    },\n    rtpa: {\n        size: 48,\n        version: 1,\n        name: \"RTPA\"\n    },\n    traa: {\n        size: 88,\n        version: 1,\n        name: \"TRAA\"\n    },\n    trav: {\n        size: 44,\n        version: 1,\n        name: \"TRAV\"\n    },\n    vfmd: {\n        size: 12,\n        version: 1,\n        name: \"VFMD\"\n    },\n    pfda: {\n        size: 20,\n        version: 1,\n        name: \"PFDA\"\n    },\n    none: {\n        size: 0,\n        version: 1,\n        name: \"\"\n    }\n};\n\nexport class WebrtcBinaryStats {\n    private statsMap = new Map<StatsType, ArrayBuffer[]>();\n    constructor() {\n        this.resetLists();\n    }\n\n    public size() {\n        let totalSize = 0;\n        for (let [key, array] of this.statsMap) {\n            for (let value of array) {\n                totalSize += value.byteLength;\n            }\n        }\n        totalSize += this.statsMap.size * ChunkHeaderSize;\n        return totalSize;\n    }\n\n    public addReport(report: WebrtcStats) {\n        let buffer = this.statsMap.get(report.type);\n        if (!buffer) {\n            buffer = new Array();\n            this.statsMap.set(report.type, buffer);\n        }\n        for (const element of report.stats) {\n            buffer!.push(element);\n        }\n    }\n\n    public write(dest: Uint8Array, startOffset: number): number {\n        let offset = startOffset;\n        for (let [key, arrayBuffer] of this.statsMap) {\n            offset += this.createHeader(dest, offset, key, arrayBuffer.length);\n            offset += this.writeStatsToBuffer(dest, arrayBuffer, offset);\n        }\n        return offset;\n    }\n\n    public resetLists() {\n        this.statsMap.clear();\n    }\n\n    private createHeader(\n        dest: Uint8Array,\n        offset: number,\n        type: StatsType,\n        elementCount: number\n    ): number {\n        let config = this.getStatsConfig(type);\n        let chunkType = config.name;\n        let dataBufferView = new DataView(dest.buffer);\n        for (let i = 0; i < 4; i++) {\n            dataBufferView.setUint8(offset + i, chunkType.charCodeAt(i));\n        }\n        dataBufferView.setUint8(offset + 4, config.version);\n        dataBufferView.setUint16(offset + 5, elementCount, true);\n        dataBufferView.setUint16(offset + 7, config.size, true);\n        return ChunkHeaderSize;\n    }\n\n    private getStatsConfig(type: StatsType) {\n        switch (type) {\n            case StatsType.DEPR:\n                return statsConfig.depr;\n            case StatsType.RTPV:\n                return statsConfig.rtpv;\n            case StatsType.RTPA:\n                return statsConfig.rtpa;\n            case StatsType.TRAV:\n                return statsConfig.trav;\n            case StatsType.TRAA:\n                return statsConfig.traa;\n            case StatsType.VFMD:\n                return statsConfig.vfmd;\n            case StatsType.PFDA:\n                return statsConfig.pfda;\n            default:\n                return statsConfig.none;\n        }\n    }\n\n    private writeStatsToBuffer(dest: Uint8Array, source: ArrayBuffer[], offset: number): number {\n        let byteCount = 0;\n        for (let value of source) {\n            let arr = new Uint8Array(value);\n            dest.set(arr, offset + byteCount);\n            byteCount += value.byteLength;\n        }\n        return byteCount;\n    }\n}\n","import {\n    WebSocketMsg,\n    WebSocketImplCallbacks,\n    LogCallbackType,\n    WebSocketHandler\n} from \"./rinterfaces\";\n\nexport class WebSocketImpl {\n    private ws?: WebSocket;\n    private wsHadError: boolean = false;\n    private serverSupportsAck = false;\n    private cacheMsgsForAck: WebSocketMsg[] = [];\n    private wsQueue: WebSocketMsg[] = []; // Queue for data to be sent when the WebSocket reconnects.\n    private wsLogger: LogCallbackType;\n    private wsException: LogCallbackType;\n    private wsHandler: WebSocketHandler;\n    private heartBeatTimeoutId: number = 0;\n    private maxReceivedAckId: number = 0;\n    private url: string = \"\";\n    constructor(\n        private sessionId: string,\n        private accessToken: string,\n        webSocketImplCallbacks: WebSocketImplCallbacks\n    ) {\n        this.wsLogger = webSocketImplCallbacks.logCallback.info;\n        this.wsException = webSocketImplCallbacks.logCallback.exception;\n        this.wsHandler = webSocketImplCallbacks.wsHandler;\n    }\n\n    public initialize(\n        url: string,\n        maxReceivedAckId: number,\n        serverSupportsAck: boolean,\n        reconnect: boolean = false\n    ) {\n        this.url = url;\n        this.maxReceivedAckId = maxReceivedAckId;\n        this.serverSupportsAck = serverSupportsAck;\n        this.createWebSocket(reconnect);\n        this.wsLogger(\"{f4b05a4}\");\n    }\n\n    public uninitialize(closeCode?: number) {\n        this.maxReceivedAckId = 0;\n        this.serverSupportsAck = false;\n        this.cacheMsgsForAck = [];\n        this.wsQueue = [];\n        this.clearHeartBeatTimeout();\n        this.ws?.close(closeCode);\n        this.wsLogger(\"{986b258}\"+ closeCode);\n    }\n\n    public reconnect() {\n        this.createWebSocket(true);\n    }\n\n    private checkWebsocketConnectionPeriodically() {\n        this.wsLogger(\"{6c3505a}\"+ this.ws?.readyState);\n        if (!this.ws) {\n            this.createWebSocket(true);\n        }\n        this.setHeartBeatTimeout();\n    }\n\n    private clearHeartBeatTimeout() {\n        if (this.heartBeatTimeoutId !== 0) {\n            self.clearTimeout(this.heartBeatTimeoutId);\n            this.heartBeatTimeoutId = 0;\n        }\n    }\n\n    private setHeartBeatTimeout() {\n        this.clearHeartBeatTimeout();\n        this.heartBeatTimeoutId = self.setTimeout(\n            () => this.checkWebsocketConnectionPeriodically(),\n            3000\n        );\n    }\n\n    private deleteFromAckCache(ack: number) {\n        for (let i = this.cacheMsgsForAck.length - 1; i >= 0; i--) {\n            if (this.cacheMsgsForAck[i].ackid! <= ack) {\n                //this.wsLogger(\"{72e9db8}\"+ this.cacheMsgsForAck[i].ackid!);\n                this.cacheMsgsForAck.splice(i, 1);\n            }\n        }\n    }\n\n    private addInAckCache(data: WebSocketMsg) {\n        if (data.ackid !== undefined) {\n            //this.wsLogger(\"{8fae9a4}\"+ data.ackid);\n            this.cacheMsgsForAck.push(data);\n        }\n    }\n\n    private sendOnWsReliablyIfNeeded(data: WebSocketMsg) {\n        if (data.ackid !== undefined && this.serverSupportsAck) {\n            this.addInAckCache(data);\n        }\n        if (this.ws) {\n            if (data.stats) {\n                this.ws.send(data.stats);\n            } else {\n                this.ws.send(JSON.stringify(data));\n            }\n        }\n    }\n\n    public send(data: WebSocketMsg) {\n        if (!this.serverSupportsAck && !this.ws) {\n            this.createWebSocket(true);\n        }\n\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.sendOnWsReliablyIfNeeded(data);\n        } else {\n            this.wsQueue.push(data);\n        }\n    }\n\n    private sendAckToServer() {\n        if (this.ws) {\n            let ackmsg: WebSocketMsg = {\n                ack: this.maxReceivedAckId\n            };\n            let ack = JSON.stringify(ackmsg);\n            this.wsLogger(\"{903be10}\"+ ack);\n            this.ws.send(ack);\n        }\n    }\n\n    public createWebSocket(reconnect: boolean = false) {\n        try {\n            let header;\n            if (this.url.includes(\"wss\")) {\n                header = \"x-nv-sessionid.\" + this.sessionId;\n\n                if (this.accessToken) {\n                    // Client wants to pass JWT to the reverse proxy here. Since there is no browser option\n                    // for adding a websocket auth header or custom header, we concatenate the token on the\n                    // session value. The structure will be:\n                    //      x-nv-sessionid.<sessionid>-Authorization.Bearer-<JWT>\n                    header += \"-Authorization.Bearer-\" + this.accessToken;\n                }\n            }\n            let websocketUrl = this.url;\n            if (reconnect) {\n                websocketUrl += \"&reconnect=1\";\n            }\n            let localWs = new WebSocket(websocketUrl, header);\n            localWs.onopen = event => {\n                this.wsLogger(\"{aaf44dc}\");\n                this.wsHandler.openHandler();\n                if (localWs === this.ws) {\n                    for (const pendingMessage of this.cacheMsgsForAck) {\n                        if (pendingMessage.stats) {\n                            localWs.send(pendingMessage.stats);\n                        } else {\n                            localWs.send(JSON.stringify(pendingMessage));\n                        }\n                    }\n                    for (const pendingMessage of this.wsQueue) {\n                        this.sendOnWsReliablyIfNeeded(pendingMessage);\n                    }\n                    this.wsQueue = [];\n                }\n            };\n            localWs.onclose = event => {\n                this.wsLogger(\"{7a09ad8}\");\n                this.wsHandler.closeHandler({\n                    error: this.wsHadError,\n                    code: event.code,\n                    reason: event.reason,\n                    wasClean: event.wasClean\n                });\n                if (localWs === this.ws) {\n                    this.ws = undefined;\n                }\n                this.wsHadError = false;\n            };\n            localWs.onerror = event => {\n                this.wsLogger(\"{418a180}\");\n                this.wsHadError = true;\n            };\n            localWs.onmessage = event => {\n                let wsMsg = <WebSocketMsg>JSON.parse(event.data); //@todo do we need try-catch?\n                if (this.serverSupportsAck) {\n                    this.setHeartBeatTimeout();\n                }\n                if (wsMsg.ackid !== undefined && !this.serverSupportsAck) {\n                    this.serverSupportsAck = true;\n                    this.wsLogger(\"{523f5b9}\");\n                    this.setHeartBeatTimeout();\n                }\n                if (wsMsg.hb) {\n                    // don't pass heartbeat to main thread\n                    return;\n                }\n\n                if (this.serverSupportsAck) {\n                    if (wsMsg.ack !== undefined) {\n                        this.deleteFromAckCache(wsMsg.ack);\n                    }\n                    // check if this msg need ack\n                    if (wsMsg.ackid !== undefined) {\n                        //check for a reapeated msg and ignore if true\n                        if (this.maxReceivedAckId < wsMsg.ackid) {\n                            this.wsHandler.messageHandler(wsMsg);\n                            this.maxReceivedAckId = wsMsg.ackid;\n                        }\n                        this.sendAckToServer();\n                    } else if (wsMsg.ack === undefined) {\n                        //this msg don;t need ack\n                        // only pass non-ack msgs to main thread\n                        this.wsHandler.messageHandler(wsMsg);\n                    }\n                } else {\n                    this.wsHandler.messageHandler(wsMsg);\n                }\n            };\n            this.ws = localWs;\n        } catch (exp) {\n            this.ws = undefined;\n            this.wsException(\"WebSocket creation exception: \" + exp);\n        }\n    }\n}\n","import { StatsHeader, WebSocketClose, WebSocketMsg, WorkerResponse } from \"./rinterfaces\";\nimport {\n    Perf,\n    ClientEvent,\n    WorkerMessage,\n    StreamingQualityWithTs,\n    MtbDuration,\n    InputChannelStats,\n    GarbageCollectionStats\n} from \"./ragnarokprofiler\";\n\nimport { WebrtcBinaryStats } from \"./stats/webrtcbinarystats\";\nimport { WebSocketImpl } from \"./websocketimpl\";\n\nconst ctx: Worker = self as any;\n\n/* This worker thread periodically uploads the browser perf and other metrics at regular interval to the server.\n   Protocol Description: https://confluence.nvidia.com/display/GAMESTREAM/Browser+Stats+Wire+Protocol\n   Note:  The initial version of this file had RagnarokWorker class but unfortunately the setInterval call\n   to the member function of the class did not work. Couldn't figure out the reason.\n   The same code in mainthread worked. Hence removed class and split everything into functions for now.\n*/\nconst ChunkHeaderSize = 9;\nconst PerfEntrySize = 13;\nconst EventEntrySize = 72;\nconst UploadInterval = 5000;\nconst StreamingQualityEntrySize = 12;\nconst MtbDurationSize = 10;\nconst InputChannelEntrySize = 12;\nconst GarbageCollectionEntrySize = 16;\n\nlet perfs: Perf[] = [];\nlet clientEvents: ClientEvent[] = [];\nlet webrtcBinaryStats: WebrtcBinaryStats = new WebrtcBinaryStats();\nlet sessionId: string = \"\"; // SessionId\nlet url: string = \"\"; // Connection URL for WebSocket.\nlet statsHeaderObj: StatsHeader | null = null;\nlet webSocket: WebSocketImpl | undefined = undefined;\nlet uploadIntervalId: number = 0; // Timer Id\nlet streamingQuality: StreamingQualityWithTs[] = [];\nlet mtbDurations: MtbDuration[] = [];\nlet inputChannelStats: InputChannelStats[] = [];\nlet garbageCollectionStats: GarbageCollectionStats[] = [];\nlet serverSupportsAck = false;\nlet nextAckIdToSendForStats = 0;\n\nfunction workerLogger(logmsg: string) {\n    let msg: WorkerResponse = {\n        log: logmsg\n    };\n    ctx.postMessage(msg);\n}\n\n/* Right now we are uploading only exception message.\n   Once the exception handler is re-factored we can collect more data.\n*/\nfunction workerException(expmsg: string) {\n    let msg: WorkerResponse = {\n        exception: expmsg\n    };\n    ctx.postMessage(msg);\n}\n\nfunction clearCachedData() {\n    perfs = [];\n    clientEvents = [];\n    webrtcBinaryStats.resetLists();\n    streamingQuality = [];\n    mtbDurations = [];\n    inputChannelStats = [];\n    garbageCollectionStats = [];\n}\n\nfunction writeChunkHeader(\n    dataBufferView: DataView,\n    offset: number,\n    chunkType: string,\n    version: number,\n    elementCount: number,\n    sizeOfElement: number\n) {\n    for (let i = 0; i < 4; i++) {\n        dataBufferView.setUint8(offset + i, chunkType.charCodeAt(i));\n    }\n    dataBufferView.setUint8(offset + 4, version);\n    dataBufferView.setUint16(offset + 5, elementCount, true);\n    dataBufferView.setUint16(offset + 7, sizeOfElement, true);\n}\n\nfunction writePerf(dataBufferView: DataView, offset: number) {\n    for (let i = 0; i < perfs.length; i++) {\n        dataBufferView.setFloat64(offset, perfs[i].RAFTS, true);\n        /* The below values are in millisec.microsec format. Covert into microsec.\n           In order to reduce the upload bytes size collecting as UInt16 ~ 65msec. */\n        dataBufferView.setUint16(offset + 8, Math.min(perfs[i].DCSend * 1000, 0xffff), true);\n        dataBufferView.setUint16(offset + 10, Math.min(perfs[i].GetStats * 1000, 0xffff), true);\n        dataBufferView.setUint8(offset + 12, perfs[i].FrameInfo);\n        offset += PerfEntrySize;\n    }\n}\n\nfunction writeSqScore(dataBufferView: DataView, offset: number) {\n    for (let i = 0; i < streamingQuality.length; i++) {\n        dataBufferView.setUint8(offset, streamingQuality[i].qualityScore);\n        dataBufferView.setUint8(offset + 1, streamingQuality[i].bandwidthScore);\n        dataBufferView.setUint8(offset + 2, streamingQuality[i].latencyScore);\n        dataBufferView.setUint8(offset + 3, streamingQuality[i].networkLossScore);\n        dataBufferView.setFloat64(offset + 4, streamingQuality[i].timestamp, true);\n        offset += StreamingQualityEntrySize;\n    }\n}\n\nfunction writeClientEvents(dataBufferView: DataView, offset: number) {\n    for (let i = 0; i < clientEvents.length; i++) {\n        dataBufferView.setFloat64(offset, clientEvents[i].TS, true);\n        offset = offset + 8;\n        let eventstr = clientEvents[i].eventtype;\n        let j = 0;\n        for (; j < eventstr.length && j < 63; j++) {\n            dataBufferView.setUint8(offset + j, eventstr.charCodeAt(j));\n        }\n        dataBufferView.setUint8(offset + j, 0x00);\n        offset = offset + 64;\n    }\n}\n\nfunction writeBlockedDurations(dataBufferView: DataView, offset: number) {\n    // Send values in milliseconds, not us as other times (getstats, DC send).\n    // Gives greater usable range on the server - scaling to us would\n    // limit the range to 50-65ms, with everything larger reported as 0xffff.\n    for (let i = 0; i < mtbDurations.length; i++) {\n        dataBufferView.setFloat64(offset, mtbDurations[i].timestamp, true);\n        dataBufferView.setUint16(offset + 8, Math.min(mtbDurations[i].duration, 0xffff), true);\n        offset = offset + MtbDurationSize;\n    }\n}\n\nfunction writeInputChannelStats(dataBufferView: DataView, offset: number) {\n    for (let i = 0; i < inputChannelStats.length; i++) {\n        dataBufferView.setFloat64(offset, inputChannelStats[i].timestamp, true);\n        dataBufferView.setUint16(\n            offset + 8,\n            Math.min(inputChannelStats[i].bufferedAmount, 0xffff),\n            true\n        );\n        dataBufferView.setUint16(\n            offset + 10,\n            Math.min(inputChannelStats[i].maxSchedulingDelay, 0xffff),\n            true\n        );\n        offset += InputChannelEntrySize;\n    }\n}\n\nfunction asInt32(num: number): number {\n    if (num < 0) {\n        return Math.max(num, -0x80000000);\n    }\n    return Math.min(num, 0xffffffff);\n}\n\nfunction writeGarbageCollectionStats(dataBufferView: DataView, offset: number) {\n    for (let i = 0; i < garbageCollectionStats.length; i++) {\n        dataBufferView.setFloat64(offset, garbageCollectionStats[i].timestamp, true);\n        dataBufferView.setInt32(\n            offset + 8,\n            asInt32(garbageCollectionStats[i].deltaUsedHeapSize),\n            true\n        );\n        dataBufferView.setInt32(\n            offset + 12,\n            asInt32(garbageCollectionStats[i].deltaTotalHeapSize),\n            true\n        );\n        offset += GarbageCollectionEntrySize;\n    }\n}\n\nfunction uploadData() {\n    if ((perfs.length || clientEvents.length) && statsHeaderObj) {\n        try {\n            statsHeaderObj.ackid = serverSupportsAck ? nextAckIdToSendForStats : undefined;\n            const header = JSON.stringify(statsHeaderObj);\n            const len = header.length;\n            const totalLen = len + 2; // 2 bytes for the size of the header.\n            const headerBytesBuffer = new ArrayBuffer(totalLen);\n            const headerView = new DataView(headerBytesBuffer);\n            headerView.setUint16(0, len);\n            for (var i = 2; i < totalLen; ++i) {\n                headerView.setUint8(i, header.charCodeAt(i - 2));\n            }\n            const headerBufferBytes = new Uint8Array(headerBytesBuffer);\n            const perfDataSize = PerfEntrySize * perfs.length;\n            const eventsDataSize = EventEntrySize * clientEvents.length;\n            const sqEventsDataSize = StreamingQualityEntrySize * streamingQuality.length;\n            const durationDataSize = MtbDurationSize * mtbDurations.length;\n            const inputChannelDataSize = InputChannelEntrySize * inputChannelStats.length;\n            const garbageCollectionDataSize =\n                GarbageCollectionEntrySize * garbageCollectionStats.length;\n            let totalSize = ChunkHeaderSize + headerBufferBytes.length;\n            if (perfDataSize) {\n                totalSize += ChunkHeaderSize + perfDataSize;\n            }\n            if (eventsDataSize) {\n                totalSize += ChunkHeaderSize + eventsDataSize;\n            }\n            if (sqEventsDataSize) {\n                totalSize += ChunkHeaderSize + sqEventsDataSize;\n            }\n            if (durationDataSize) {\n                totalSize += ChunkHeaderSize + durationDataSize;\n            }\n            if (inputChannelDataSize) {\n                totalSize += ChunkHeaderSize + inputChannelDataSize;\n            }\n            if (garbageCollectionDataSize) {\n                totalSize += ChunkHeaderSize + garbageCollectionDataSize;\n            }\n\n            totalSize += webrtcBinaryStats.size();\n            const dataBuffer = new ArrayBuffer(totalSize);\n            const dataBufferView = new DataView(dataBuffer);\n            let offset = 0;\n            new Uint8Array(dataBuffer).set(headerBufferBytes);\n            offset += headerBufferBytes.length;\n            writeChunkHeader(dataBufferView, offset, \"BPRF\", 1, 0, 0);\n            offset += ChunkHeaderSize;\n            if (perfDataSize) {\n                writeChunkHeader(dataBufferView, offset, \"PERF\", 2, perfs.length, PerfEntrySize);\n                offset += ChunkHeaderSize;\n                writePerf(dataBufferView, offset);\n                offset += perfDataSize;\n            }\n            if (eventsDataSize) {\n                writeChunkHeader(\n                    dataBufferView,\n                    offset,\n                    \"EVNT\",\n                    1,\n                    clientEvents.length,\n                    EventEntrySize\n                );\n                offset += ChunkHeaderSize;\n                writeClientEvents(dataBufferView, offset);\n                offset += eventsDataSize;\n            }\n            if (sqEventsDataSize) {\n                writeChunkHeader(\n                    dataBufferView,\n                    offset,\n                    \"SQEV\",\n                    1,\n                    streamingQuality.length,\n                    StreamingQualityEntrySize\n                );\n\n                offset += ChunkHeaderSize;\n                writeSqScore(dataBufferView, offset);\n                offset += sqEventsDataSize;\n            }\n            if (durationDataSize) {\n                writeChunkHeader(\n                    dataBufferView,\n                    offset,\n                    \"MTBD\",\n                    1,\n                    mtbDurations.length,\n                    MtbDurationSize\n                );\n                offset += ChunkHeaderSize;\n                writeBlockedDurations(dataBufferView, offset);\n                offset += durationDataSize;\n            }\n            if (inputChannelDataSize) {\n                writeChunkHeader(\n                    dataBufferView,\n                    offset,\n                    \"INPT\",\n                    1,\n                    inputChannelStats.length,\n                    InputChannelEntrySize\n                );\n                offset += ChunkHeaderSize;\n                writeInputChannelStats(dataBufferView, offset);\n                offset += inputChannelDataSize;\n            }\n            if (garbageCollectionDataSize) {\n                writeChunkHeader(\n                    dataBufferView,\n                    offset,\n                    \"GRBG\",\n                    1,\n                    garbageCollectionStats.length,\n                    GarbageCollectionEntrySize\n                );\n                offset += ChunkHeaderSize;\n                writeGarbageCollectionStats(dataBufferView, offset);\n                offset += garbageCollectionDataSize;\n            }\n\n            let buffer = new Uint8Array(dataBuffer);\n            webrtcBinaryStats.write(buffer, offset);\n            webSocket?.send({\n                stats: dataBuffer,\n                ackid: serverSupportsAck ? nextAckIdToSendForStats : undefined\n            });\n        } catch (err) {\n            workerException(\n                \"Exception in perf/stats upload. Error : \" + err.message + \" stack: \" + err.stack\n            );\n        }\n    }\n    clearCachedData();\n}\n\nfunction wsMessageHandler(data: WebSocketMsg) {\n    if (!serverSupportsAck && data.ackid !== undefined) {\n        serverSupportsAck = true;\n    }\n    const response: WorkerResponse = { wsMessage: data };\n    ctx.postMessage(response);\n}\n\nfunction wsCloseHandler(data: WebSocketClose) {\n    const response: WorkerResponse = { wsClose: data };\n    ctx.postMessage(response);\n}\n\nfunction wsOpenHandler() {\n    const response: WorkerResponse = { wsOpen: true };\n    ctx.postMessage(response);\n}\n\nfunction wsOpeningHandler() {\n    const response: WorkerResponse = { wsOpening: true };\n    ctx.postMessage(response);\n}\n\nfunction createWebSocket(maxReceivedAckId: number, reconnect?: boolean) {\n    webSocket = new WebSocketImpl(sessionId, \"\", {\n        wsHandler: {\n            messageHandler: wsMessageHandler,\n            openHandler: wsOpenHandler,\n            closeHandler: wsCloseHandler,\n            openingHandler: wsOpeningHandler\n        },\n        logCallback: {\n            info: workerLogger,\n            exception: workerException\n        }\n    });\n    webSocket.initialize(url, maxReceivedAckId, serverSupportsAck, reconnect);\n    wsOpeningHandler();\n}\n\nctx.onmessage = function (message: MessageEvent) {\n    try {\n        const data: WorkerMessage = message.data;\n        if (data.initMessage) {\n            sessionId = data.initMessage.sessionId;\n            workerLogger(\"{6ccab8d}\");\n        } else if (data.perf) {\n            perfs.push(data.perf);\n        } else if (data.clientEvent) {\n            clientEvents.push(data.clientEvent);\n        } else if (data.startStats) {\n            statsHeaderObj = data.startStats.statsHeader;\n            const response: WorkerResponse = {\n                statsStarted: true\n            };\n            // keep uploading performance data every 5 seconds.\n            uploadIntervalId = self.setInterval(() => uploadData(), UploadInterval);\n            ctx.postMessage(response);\n            workerLogger(\"{5209d98}\");\n        } else if (data.stopStats) {\n            self.clearInterval(uploadIntervalId);\n            uploadData();\n            clearCachedData();\n            workerLogger(\"{b58b6ad}\");\n        } else if (data.webrtcStats) {\n            if (data.ackid) {\n                nextAckIdToSendForStats = data.ackid;\n            }\n            if (data.webrtcStats.stats) {\n                webrtcBinaryStats.addReport(data.webrtcStats);\n            }\n        } else if (data.sq) {\n            streamingQuality.push(data.sq);\n        } else if (data.startWebSocket) {\n            url = data.startWebSocket.signInURL;\n            serverSupportsAck = data.startWebSocket.serverSupportsAck;\n            createWebSocket(data.startWebSocket.maxReceivedAckId, data.startWebSocket.reconnect);\n        } else if (data.stopWebSocket) {\n            webSocket?.uninitialize();\n            serverSupportsAck = false;\n        } else if (data.send) {\n            webSocket?.send(data.send);\n        } else if (data.duration) {\n            mtbDurations.push(data.duration);\n        } else if (data.inputChannelStats) {\n            inputChannelStats.push(data.inputChannelStats);\n        } else if (data.garbageCollectionStats) {\n            garbageCollectionStats.push(data.garbageCollectionStats);\n        }\n    } catch (exp) {\n        workerException(\"Worker onmessage exception: \" + exp);\n    }\n};\n"]}